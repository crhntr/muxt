package main

import (
	"flag"
	"fmt"
	"go/ast"
	"io"
	"log"
	"os"
	"path/filepath"
	"slices"

	"golang.org/x/tools/go/packages"

	"github.com/crhntr/muxt"
	"github.com/crhntr/muxt/internal/source"
)

const CodeGenerationComment = "// Code generated by muxt. DO NOT EDIT."

type Generate struct {
	Package   *packages.Package
	goPackage string
	goFile    string
	goLine    string

	templatesVariable string
	outputFilename    string
	routesFunction    string
}

func (g Generate) ImportReceiverMethods(tp, method string) (*ast.FuncType, []*ast.ImportSpec, bool) {
	return source.GoFiles(g.Package.Syntax).ImportReceiverMethods(tp, method)
}

func generateCommand(args []string, workingDirectory string, getEnv func(string) string, stdout, stderr io.Writer) error {
	config := Generate{
		goPackage: getEnv("GOPACKAGE"),
		goFile:    getEnv("GOFILE"),
		goLine:    getEnv("GOLINE"),
	}
	flagSet := flag.NewFlagSet("generate", flag.ContinueOnError)
	flagSet.StringVar(&config.templatesVariable, "templates-variable", muxt.DefaultTemplatesVariableName, "templates variable name")
	flagSet.StringVar(&config.outputFilename, "output-file", "template_routes.go", "file name of generated output")
	flagSet.StringVar(&config.routesFunction, "routes-func", muxt.DefaultRoutesFunctionName, "file name of generated output")
	if err := flagSet.Parse(args); err != nil {
		return err
	}
	list, err := packages.Load(&packages.Config{
		Mode:  packages.NeedFiles | packages.NeedSyntax | packages.NeedEmbedPatterns | packages.NeedEmbedFiles,
		Dir:   workingDirectory,
		Tests: false,
	}, workingDirectory)
	if err != nil {
		return err
	}
	if config.goPackage != "" {
		i := slices.IndexFunc(list, func(p *packages.Package) bool { return p.ID == config.goPackage })
		if i < 0 {
			return fmt.Errorf("package %s not loaded", config.goPackage)
		}
		config.Package = list[i]
	} else if len(list) > 0 {
		config.Package = list[0]
	}
	ts, err := source.Templates(workingDirectory, config.templatesVariable, config.Package.Fset, config.Package.Syntax, config.Package.EmbedFiles)
	if err != nil {
		return err
	}
	patterns, err := muxt.TemplatePatterns(ts)
	if err != nil {
		return err
	}
	out := log.New(stdout, "", 0)
	s, err := muxt.Generate(patterns, config.goPackage, config.templatesVariable, config.routesFunction, "", config.Package.Fset, config.Package.Syntax, config.Package.Syntax, out)
	if err != nil {
		return err
	}
	return os.WriteFile(filepath.Join(workingDirectory, config.outputFilename), []byte(CodeGenerationComment+"\n\n"+s), 0644)
}
