cat f.go template.go

muxt generate --receiver-type=Server

cat f.go template_routes.go

muxt check

exec go test -cover

-- template.gohtml --
{{- define "GET /{id} F(id)"}}{{.Result}}{{end -}}

{{define "GET / Index()" -}}
<a href="{{$.Path.F $.Result}}">See {{$.Result}}</a>
{{- end}}
-- go.mod --
module example.com

go 1.22
-- template.go --
package main

import (
	"embed"
	"html/template"
)

//go:embed template.gohtml
var templatesDir embed.FS

var templates = template.Must(template.ParseFS(templatesDir, "template.gohtml"))
-- f.go --
package main

import "strconv"

type Server struct{}

func (Server) Index() ID { return 32 }

func (Server) F(id ID) string { return strconv.Itoa(int(id) * 5) }

type ID int64

func (id *ID) UnmarshalText(text []byte) error {
	n, err := strconv.ParseInt(string(text), 2, 64)
	if err != nil {
		return err
	}
	*id = ID(n)
	return nil
}

func (id ID) MarshalText() ([]byte, error) {
	return []byte(strconv.FormatInt(int64(id), 10)), nil
}
-- template_test.go --
package main

import (
	"io"
	"testing"

	"net/http"
	"net/http/httptest"
)

func TestF(t *testing.T) {
	mux := http.NewServeMux()

	TemplateRoutes(mux, Server{})

	req := httptest.NewRequest(http.MethodGet, "/111", nil)
	rec := httptest.NewRecorder()

	mux.ServeHTTP(rec, req)

	res := rec.Result()

	if res.StatusCode != http.StatusOK {
		t.Fatalf("expected OK got %d", res.StatusCode)
	}

	buf, err := io.ReadAll(res.Body)
	if err != nil {
		t.Fatal(err)
	}

	if string(buf) != "35" {
		t.Errorf(`expected "35" got %q`, string(buf))
	}
}

func TestIndex(t *testing.T) {
	mux := http.NewServeMux()

	TemplateRoutes(mux, Server{})

	req := httptest.NewRequest(http.MethodGet, "/", nil)
	rec := httptest.NewRecorder()

	mux.ServeHTTP(rec, req)

	res := rec.Result()

	if res.StatusCode != http.StatusOK {
		t.Fatalf("expected OK got %d", res.StatusCode)
	}

	buf, err := io.ReadAll(res.Body)
	if err != nil {
		t.Fatal(err)
	}

	if exp := `<a href="/32">See 32</a>`; string(buf) != exp {
		t.Errorf(`expected %q got %q`, exp, string(buf))
	}
}
