muxt generate --receiver-type=T

-- go.mod --
module example.com

go 1.20

-- template.go --
package main

import (
	"embed"
	"html/template"
)

//go:embed template.gohtml
var templatesDir embed.FS

var templates = template.Must(template.ParseFS(templatesDir, "template.gohtml"))

-- template.gohtml --
{{- define "GET / F(form)" -}}
FieldInt={{.FieldInt}}
FieldInt64={{.FieldInt64}}
FieldInt32={{.FieldInt32}}
FieldInt16={{.FieldInt16}}
FieldInt8={{.FieldInt8}}
FieldUint={{.FieldUint}}
FieldUint64={{.FieldUint64}}
FieldUint32={{.FieldUint32}}
FieldUint16={{.FieldUint16}}
FieldUint8={{.FieldUint8}}
FieldBool={{.FieldBool}}
FieldTime={{.FieldTime}}
{{- end -}}
-- in.go --
package main

import (
	"net/http"
	"time"
)

type (
	T struct{}
	In struct{
		FieldInt    int
		FieldInt64  int64
		FieldInt32  int32
		FieldInt16  int16
		FieldInt8   int8
		FieldUint   uint
		FieldUint64 uint64
		FieldUint32 uint32
		FieldUint16 uint16
		FieldUint8  uint8
		FieldBool   bool
		FieldTime   time.Time
	}
)

func (T) F(form In) In { return form }

-- template_test.go --
package server

import (
	"io"
	"net/http"
	"net/http/httptest"
	"net/url"
	"slices"
	"strings"
	"testing"
)

func Test(t *testing.T) {
	mux := http.NewServeMux()

	var service T

	service.spy = func(form Form) Form {
		if exp := []int{7, 14, 21, 29}; !slices.Equal(exp, form.Count) {
			t.Errorf("exp %v, got %v", exp, form.Count)
		}
		if exp := "apple"; form.Str != exp {
			t.Errorf("exp %v, got %v", exp, form.Str)
		}
		return form
	}

	routes(mux, service)

	req := httptest.NewRequest(http.MethodPost, "/", strings.NewReader(url.Values{
		"FieldInt": []string{"1"},
    "FieldInt64": []string{"2"},
    "FieldInt32": []string{"3"},
    "FieldInt16": []string{"4"},
    "FieldInt8": []string{"5"},
    "FieldUint": []string{"6"},
    "FieldUint64": []string{"7"},
    "FieldUint32": []string{"8"},
    "FieldUint16": []string{"9"},
    "FieldUint8": []string{"10"},
    "FieldBool": []string{"11"},
    "FieldTime": []string{"12"},
	}.Encode()))
	req.Header.Set("content-type", "application/x-www-form-urlencoded")
	rec := httptest.NewRecorder()

	mux.ServeHTTP(rec, req)

	res := rec.Result()

	if res.StatusCode != http.StatusCreated {
		t.Error("exp", http.StatusText(http.StatusCreated), "got", http.StatusText(res.StatusCode))
	}

	body, err := io.ReadAll(res.Body)
	if err != nil {
		t.Error(err)
	}

	for _, line := range []string{
	"FieldInt=1",
    "FieldInt64=2",
    "FieldInt32=3",
    "FieldInt16=4",
    "FieldInt8=5",
    "FieldUint=6",
    "FieldUint64=7",
    "FieldUint32=8",
    "FieldUint16=9",
    "FieldUint8=10",
    "FieldBool=11",
    "FieldTime=12",
    } {
      if !strings.Contains(string(body), line) {
        t.Errorf("%q not found", line)
      }
    }

    if t.Failed() {
    t.Log(string(body))
    }
}
