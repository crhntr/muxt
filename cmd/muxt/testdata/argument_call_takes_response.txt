muxt generate --receiver-type=T
muxt check

cat template_routes.go

exec go test -cover

-- template.gohtml --
{{define "GET / F(ctx, Headers(response))"}}{{end}}

-- go.mod --
module example.com

go 1.22
-- template.go --
package main

import (
	"embed"
	"html/template"
)

//go:embed template.gohtml
var source embed.FS

var templates = template.Must(template.ParseFS(source, "*"))
-- in.go --
package main

import (
	"context"
	"net/http"
)

type T struct{}

func (T) F(context.Context, any) any { return nil }

func (T) Headers(response http.ResponseWriter) any {
	response.Header().Set("x-some-data", "123")
	response.WriteHeader(http.StatusNotFound)
	return nil
}
-- template_test.go --
package main

import (
	"net/http"
	"net/http/httptest"
	"testing"
)

type FakeResponse struct {
	wrapped              http.ResponseWriter
	WriteHeaderCallCount int
	HeaderCallCount      int
	WriteCallCount       int
}

func (fake *FakeResponse) Header() http.Header {
	fake.HeaderCallCount++
	return fake.wrapped.Header()
}

func (fake *FakeResponse) Write(in []byte) (int, error) {
	fake.WriteCallCount++
	return fake.wrapped.Write(in)
}
func (fake *FakeResponse) WriteHeader(statusCode int) {
	fake.WriteHeaderCallCount++
	fake.wrapped.WriteHeader(statusCode)
}

func Test(t *testing.T) {
	mux := http.NewServeMux()

	var service T
	TemplateRoutes(mux, service)

	req := httptest.NewRequest(http.MethodGet, "/", nil)
	res := new(FakeResponse)
	rec := httptest.NewRecorder()
	res.wrapped = rec

	mux.ServeHTTP(res, req)

	if res.WriteHeaderCallCount != 1 {
		t.Errorf("unexpected WriteHeader count: want %d got %d", 1, res.WriteHeaderCallCount)
	}
	if res.HeaderCallCount != 3 {
		t.Errorf("unexpected Header call count: want %d got %d", 3, res.HeaderCallCount)
	}
	if val := rec.Result().Header.Get("x-some-data"); val != "123" {
		t.Errorf("unexpected value for x-some-data: want %q got %q", "123", val)
	}
	if rec.Result().Header.Get("content-length") == "" {
		t.Error("unexpected content-length to be set")
	}
	if rec.Result().Header.Get("content-type") == "" {
		t.Error("unexpected content-type to be set")
	}
}
