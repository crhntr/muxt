muxt generate --receiver-type=T
muxt check

cat template_routes.go

exec go test

-- go.mod --
module example.com

go 1.24
-- template.go --
package main

import (
	"embed"
	"html/template"
)

//go:embed template.gohtml
var templatesDir embed.FS

var templates = template.Must(template.ParseFS(templatesDir, "template.gohtml"))

func main() {}
-- template.gohtml --
{{- define "POST / F(form)" -}}
FieldInt={{.Result.FieldInt}}
FieldInt64={{.Result.FieldInt64}}
FieldInt32={{.Result.FieldInt32}}
FieldInt16={{.Result.FieldInt16}}
FieldInt8={{.Result.FieldInt8}}
FieldUint={{.Result.FieldUint}}
FieldUint64={{.Result.FieldUint64}}
FieldUint32={{.Result.FieldUint32}}
FieldUint16={{.Result.FieldUint16}}
FieldUint8={{.Result.FieldUint8}}
FieldBool={{.Result.FieldBool}}
FieldTime={{.Result.FieldTime}}
{{- end -}}
-- in.go --
package main

import "time"

type (
	T  struct{
		spy func(form In) In
	}
	In struct {
		FieldInt    int
		FieldInt64  int64
		FieldInt32  int32
		FieldInt16  int16
		FieldInt8   int8
		FieldUint   uint
		FieldUint64 uint64
		FieldUint32 uint32
		FieldUint16 uint16
		FieldUint8  uint8
		FieldBool   bool
		FieldTime   time.Time
	}
)

func (T) F(form In) In { return form }
-- template_test.go --
package main

import (
	"io"
	"net/http"
	"net/http/httptest"
	"net/url"
	"strings"
	"testing"
)

func Test(t *testing.T) {
	req := httptest.NewRequest(http.MethodPost, "/", strings.NewReader(url.Values{
		"FieldInt":    []string{"1"},
		"FieldInt64":  []string{"2"},
		"FieldInt32":  []string{"3"},
		"FieldInt16":  []string{"4"},
		"FieldInt8":   []string{"5"},
		"FieldUint":   []string{"6"},
		"FieldUint64": []string{"7"},
		"FieldUint32": []string{"8"},
		"FieldUint16": []string{"9"},
		"FieldUint8":  []string{"10"},
		"FieldBool":   []string{"true"},
		"FieldTime":   []string{"2006-01-02T15:04:05Z"},
	}.Encode()))
	req.Header.Set("content-type", "application/x-www-form-urlencoded")
	rec := httptest.NewRecorder()

	service := T{
		spy: func(form In) In {
  		return form
  	},
	}
	mux := http.NewServeMux()
	TemplateRoutes(mux, service)
	mux.ServeHTTP(rec, req)

	res := rec.Result()

		body, err := io.ReadAll(res.Body)
    if err != nil {
      t.Error(err)
    }
    t.Log(string(body))

	if res.StatusCode != http.StatusOK {
		t.Fatalf("exp %q got %q", http.StatusText(http.StatusOK), http.StatusText(res.StatusCode))
	}

	for _, line := range []string{
		"FieldInt=1",
		"FieldInt64=2",
		"FieldInt32=3",
		"FieldInt16=4",
		"FieldInt8=5",
		"FieldUint=6",
		"FieldUint64=7",
		"FieldUint32=8",
		"FieldUint16=9",
		"FieldUint8=10",
		"FieldBool=true",
		"FieldTime=2006-01-02",
	} {
		if !strings.Contains(string(body), line) {
			t.Errorf("%q not found", line)
		}
	}

	if t.Failed() {
		t.Log(string(body))
	}
}
