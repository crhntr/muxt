// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"context"
	"net/http"
	"sync"

	"github.com/crhntr/muxt/internal/generate/testdata/001/fruit"
)

type FakeReceiver struct {
	EditRowStub        func(http.ResponseWriter, *http.Request, string) (any, error)
	editRowMutex       sync.RWMutex
	editRowArgsForCall []struct {
		arg1 http.ResponseWriter
		arg2 *http.Request
		arg3 string
	}
	editRowReturns struct {
		result1 any
		result2 error
	}
	editRowReturnsOnCall map[int]struct {
		result1 any
		result2 error
	}
	TasteStub        func(context.Context) (any, error)
	tasteMutex       sync.RWMutex
	tasteArgsForCall []struct {
		arg1 context.Context
	}
	tasteReturns struct {
		result1 any
		result2 error
	}
	tasteReturnsOnCall map[int]struct {
		result1 any
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeReceiver) EditRow(arg1 http.ResponseWriter, arg2 *http.Request, arg3 string) (any, error) {
	fake.editRowMutex.Lock()
	ret, specificReturn := fake.editRowReturnsOnCall[len(fake.editRowArgsForCall)]
	fake.editRowArgsForCall = append(fake.editRowArgsForCall, struct {
		arg1 http.ResponseWriter
		arg2 *http.Request
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.EditRowStub
	fakeReturns := fake.editRowReturns
	fake.recordInvocation("EditRow", []interface{}{arg1, arg2, arg3})
	fake.editRowMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeReceiver) EditRowCallCount() int {
	fake.editRowMutex.RLock()
	defer fake.editRowMutex.RUnlock()
	return len(fake.editRowArgsForCall)
}

func (fake *FakeReceiver) EditRowCalls(stub func(http.ResponseWriter, *http.Request, string) (any, error)) {
	fake.editRowMutex.Lock()
	defer fake.editRowMutex.Unlock()
	fake.EditRowStub = stub
}

func (fake *FakeReceiver) EditRowArgsForCall(i int) (http.ResponseWriter, *http.Request, string) {
	fake.editRowMutex.RLock()
	defer fake.editRowMutex.RUnlock()
	argsForCall := fake.editRowArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeReceiver) EditRowReturns(result1 any, result2 error) {
	fake.editRowMutex.Lock()
	defer fake.editRowMutex.Unlock()
	fake.EditRowStub = nil
	fake.editRowReturns = struct {
		result1 any
		result2 error
	}{result1, result2}
}

func (fake *FakeReceiver) EditRowReturnsOnCall(i int, result1 any, result2 error) {
	fake.editRowMutex.Lock()
	defer fake.editRowMutex.Unlock()
	fake.EditRowStub = nil
	if fake.editRowReturnsOnCall == nil {
		fake.editRowReturnsOnCall = make(map[int]struct {
			result1 any
			result2 error
		})
	}
	fake.editRowReturnsOnCall[i] = struct {
		result1 any
		result2 error
	}{result1, result2}
}

func (fake *FakeReceiver) Taste(arg1 context.Context) (any, error) {
	fake.tasteMutex.Lock()
	ret, specificReturn := fake.tasteReturnsOnCall[len(fake.tasteArgsForCall)]
	fake.tasteArgsForCall = append(fake.tasteArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.TasteStub
	fakeReturns := fake.tasteReturns
	fake.recordInvocation("Taste", []interface{}{arg1})
	fake.tasteMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeReceiver) TasteCallCount() int {
	fake.tasteMutex.RLock()
	defer fake.tasteMutex.RUnlock()
	return len(fake.tasteArgsForCall)
}

func (fake *FakeReceiver) TasteCalls(stub func(context.Context) (any, error)) {
	fake.tasteMutex.Lock()
	defer fake.tasteMutex.Unlock()
	fake.TasteStub = stub
}

func (fake *FakeReceiver) TasteArgsForCall(i int) context.Context {
	fake.tasteMutex.RLock()
	defer fake.tasteMutex.RUnlock()
	argsForCall := fake.tasteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeReceiver) TasteReturns(result1 any, result2 error) {
	fake.tasteMutex.Lock()
	defer fake.tasteMutex.Unlock()
	fake.TasteStub = nil
	fake.tasteReturns = struct {
		result1 any
		result2 error
	}{result1, result2}
}

func (fake *FakeReceiver) TasteReturnsOnCall(i int, result1 any, result2 error) {
	fake.tasteMutex.Lock()
	defer fake.tasteMutex.Unlock()
	fake.TasteStub = nil
	if fake.tasteReturnsOnCall == nil {
		fake.tasteReturnsOnCall = make(map[int]struct {
			result1 any
			result2 error
		})
	}
	fake.tasteReturnsOnCall[i] = struct {
		result1 any
		result2 error
	}{result1, result2}
}

func (fake *FakeReceiver) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.editRowMutex.RLock()
	defer fake.editRowMutex.RUnlock()
	fake.tasteMutex.RLock()
	defer fake.tasteMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeReceiver) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ fruit.Receiver = new(FakeReceiver)
