// Code generated by muxt. DO NOT EDIT.

package main

import (
	"context"
	"net/http"
	"strconv"
	"bytes"
	"html/template"
)

type RoutesReceiver interface {
	SubmitFormEditRow(request *http.Request, fruitID int) EditRowPage
	GetFormEditRow(fruitID int) EditRowPage
	List(_ context.Context) []Row
}

func routes(mux *http.ServeMux, receiver RoutesReceiver) {
	mux.HandleFunc("PATCH /fruits/{fruit}", func(response http.ResponseWriter, request *http.Request) {
		fruitParsed, err := strconv.ParseInt(request.PathValue("fruit"), 10, 64)
		if err != nil {
			http.Error(response, err.Error(), http.StatusBadRequest)
			return
		}
		fruit := int(fruitParsed)
		data := receiver.SubmitFormEditRow(request, fruit)
		execute(response, request, templates.Lookup("PATCH /fruits/{fruit} SubmitFormEditRow(request, fruit)"), http.StatusOK, data)
	})
	mux.HandleFunc("GET /fruits/{fruit}/edit", func(response http.ResponseWriter, request *http.Request) {
		fruitParsed, err := strconv.ParseInt(request.PathValue("fruit"), 10, 64)
		if err != nil {
			http.Error(response, err.Error(), http.StatusBadRequest)
			return
		}
		fruit := int(fruitParsed)
		data := receiver.GetFormEditRow(fruit)
		execute(response, request, templates.Lookup("GET /fruits/{fruit}/edit GetFormEditRow(fruit)"), http.StatusOK, data)
	})
	mux.HandleFunc("GET /help", func(response http.ResponseWriter, request *http.Request) {
		execute(response, request, templates.Lookup("GET /help"), http.StatusOK, request)
	})
	mux.HandleFunc("GET /{$}", func(response http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		data := receiver.List(ctx)
		execute(response, request, templates.Lookup("GET /{$} List(ctx)"), http.StatusOK, data)
	})
}
func execute(response http.ResponseWriter, request *http.Request, t *template.Template, code int, data any) {
	buf := bytes.NewBuffer(nil)
	if err := t.Execute(buf, data); err != nil {
		http.Error(response, err.Error(), http.StatusInternalServerError)
		return
	}
	response.WriteHeader(code)
	_, _ = buf.WriteTo(response)
}
