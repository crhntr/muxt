// Code generated by muxt. DO NOT EDIT.
// muxt version: (devel)

package hypertext

import (
	"bytes"
	"context"
	"net/http"
	"path"
	"strconv"
)

type RoutesReceiver interface {
	SubmitFormEditRow(fruitID int, form EditRow) EditRowPage
	GetFormEditRow(fruitID int) EditRowPage
	List(_ context.Context) []Row
}

func TemplateRoutes(mux *http.ServeMux, receiver RoutesReceiver) {
	mux.HandleFunc("PATCH /fruits/{id}", func(res http.ResponseWriter, request *http.Request) {
		var response = &TemplateResponseWriter{underlying: res, statusCode: http.StatusOK}
		idParsed, err := strconv.Atoi(request.PathValue("id"))
		if err != nil {
			http.Error(res, err.Error(), http.StatusBadRequest)
			return
		}
		id := idParsed
		request.ParseForm()
		var form EditRow
		{
			value, err := strconv.Atoi(request.FormValue("count"))
			if err != nil {
				http.Error(res, err.Error(), http.StatusBadRequest)
				return
			}
			if value < 0 {
				http.Error(res, "count must not be less than 0", http.StatusBadRequest)
				return
			}
			form.Value = value
		}
		result := receiver.SubmitFormEditRow(id, form)
		buf := bytes.NewBuffer(nil)
		rd := newTemplateData(result, request)
		if err := templates.ExecuteTemplate(buf, "PATCH /fruits/{id} SubmitFormEditRow(id, form)", rd); err != nil {
			http.Error(res, err.Error(), http.StatusInternalServerError)
			return
		}
		response.Header().Set("content-type", "text/html; charset=utf-8")
		response.Header().Set("content-length", strconv.Itoa(buf.Len()))
		statusCode := http.StatusOK
		res.WriteHeader(statusCode)
		_, _ = buf.WriteTo(response)
	})
	mux.HandleFunc("GET /fruits/{id}/edit", func(res http.ResponseWriter, request *http.Request) {
		var response = &TemplateResponseWriter{underlying: res, statusCode: http.StatusOK}
		idParsed, err := strconv.Atoi(request.PathValue("id"))
		if err != nil {
			http.Error(res, err.Error(), http.StatusBadRequest)
			return
		}
		id := idParsed
		result := receiver.GetFormEditRow(id)
		buf := bytes.NewBuffer(nil)
		rd := newTemplateData(result, request)
		if err := templates.ExecuteTemplate(buf, "GET /fruits/{id}/edit GetFormEditRow(id)", rd); err != nil {
			http.Error(res, err.Error(), http.StatusInternalServerError)
			return
		}
		response.Header().Set("content-type", "text/html; charset=utf-8")
		response.Header().Set("content-length", strconv.Itoa(buf.Len()))
		statusCode := http.StatusOK
		res.WriteHeader(statusCode)
		_, _ = buf.WriteTo(response)
	})
	mux.HandleFunc("GET /help", func(res http.ResponseWriter, request *http.Request) {
		var (
			result = struct {
			}{}
			response = &TemplateResponseWriter{underlying: res, statusCode: http.StatusOK}
		)
		buf := bytes.NewBuffer(nil)
		rd := newTemplateData(result, request)
		if err := templates.ExecuteTemplate(buf, "GET /help", rd); err != nil {
			http.Error(res, err.Error(), http.StatusInternalServerError)
			return
		}
		response.Header().Set("content-type", "text/html; charset=utf-8")
		response.Header().Set("content-length", strconv.Itoa(buf.Len()))
		res.WriteHeader(http.StatusOK)
		_, _ = buf.WriteTo(response)
	})
	mux.HandleFunc("GET /{$}", func(res http.ResponseWriter, request *http.Request) {
		var response = &TemplateResponseWriter{underlying: res, statusCode: http.StatusOK}
		ctx := request.Context()
		result := receiver.List(ctx)
		buf := bytes.NewBuffer(nil)
		rd := newTemplateData(result, request)
		if err := templates.ExecuteTemplate(buf, "GET /{$} List(ctx)", rd); err != nil {
			http.Error(res, err.Error(), http.StatusInternalServerError)
			return
		}
		response.Header().Set("content-type", "text/html; charset=utf-8")
		response.Header().Set("content-length", strconv.Itoa(buf.Len()))
		statusCode := http.StatusOK
		res.WriteHeader(statusCode)
		_, _ = buf.WriteTo(response)
	})
}

type TemplateResponseWriter struct {
	underlying http.ResponseWriter
	statusCode int
}

func (res *TemplateResponseWriter) Header() http.Header {
	return res.underlying.Header()
}

func (res *TemplateResponseWriter) Write(in []byte) (int, error) {
	if res.statusCode != 0 {
		res.underlying.WriteHeader(res.statusCode)
	}
	return res.underlying.Write(in)
}

func (res *TemplateResponseWriter) WriteHeader(statusCode int) {
	res.statusCode = statusCode
}

func (res *TemplateResponseWriter) Unwrap() http.ResponseWriter {
	return res.underlying
}

type TemplateData[T any] struct {
	request *http.Request
	result  T
}

func (TemplateData[T]) Path() TemplateRoutePaths {
	return TemplateRoutePaths{}
}

func (data TemplateData[T]) Result() T {
	return data.result
}

func (data TemplateData[T]) Request() *http.Request {
	return data.request
}

func newTemplateData[T any](result T, request *http.Request) TemplateData[T] {
	return TemplateData[T]{result: result, request: request}
}

type TemplateRoutePaths struct {
}

func TemplateRoutePath() TemplateRoutePaths {
	return TemplateRoutePaths{}
}

func (TemplateRoutePaths) SubmitFormEditRow(id int) string {
	return "/" + path.Join("fruits", strconv.Itoa(id))
}

func (TemplateRoutePaths) GetFormEditRow(id int) string {
	return "/" + path.Join("fruits", strconv.Itoa(id), "edit")
}

func (TemplateRoutePaths) ReadHelp() string {
	return "/help"
}

func (TemplateRoutePaths) List() string {
	return "/"
}
