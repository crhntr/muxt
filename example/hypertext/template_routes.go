// Code generated by muxt. DO NOT EDIT.
// muxt version: (devel)

package hypertext

import (
	"bytes"
	"context"
	"net/http"
	"path"
	"strconv"
)

type RoutesReceiver interface {
	SubmitFormEditRow(fruitID int, form EditRow) EditRowPage
	GetFormEditRow(fruitID int) EditRowPage
	List(_ context.Context) []Row
}

func TemplateRoutes(mux *http.ServeMux, receiver RoutesReceiver) {
	mux.HandleFunc("PATCH /fruits/{id}", func(response http.ResponseWriter, request *http.Request) {
		idParsed, err := strconv.Atoi(request.PathValue("id"))
		if err != nil {
			http.Error(response, err.Error(), http.StatusBadRequest)
			return
		}
		id := idParsed
		request.ParseForm()
		var form EditRow
		{
			value, err := strconv.Atoi(request.FormValue("count"))
			if err != nil {
				http.Error(response, err.Error(), http.StatusBadRequest)
				return
			}
			if value < 0 {
				http.Error(response, "count must not be less than 0", http.StatusBadRequest)
				return
			}
			form.Value = value
		}
		result := receiver.SubmitFormEditRow(id, form)
		var (
			buf        = bytes.NewBuffer(nil)
			rd         = newTemplateData(response, request, result, true, nil)
			statusCode = http.StatusOK
		)
		if err := templates.ExecuteTemplate(buf, "PATCH /fruits/{id} SubmitFormEditRow(id, form)", rd); err != nil {
			http.Error(response, err.Error(), http.StatusInternalServerError)
			return
		}
		if contentType := response.Header().Get("content-type"); contentType == "" {
			response.Header().Set("content-type", "text/html; charset=utf-8")
		}
		response.Header().Set("content-length", strconv.Itoa(buf.Len()))
		if rd.statusCode != 0 {
			statusCode = rd.statusCode
		}
		response.WriteHeader(statusCode)
		_, _ = buf.WriteTo(response)
	})
	mux.HandleFunc("GET /fruits/{id}/edit", func(response http.ResponseWriter, request *http.Request) {
		idParsed, err := strconv.Atoi(request.PathValue("id"))
		if err != nil {
			http.Error(response, err.Error(), http.StatusBadRequest)
			return
		}
		id := idParsed
		result := receiver.GetFormEditRow(id)
		var (
			buf        = bytes.NewBuffer(nil)
			rd         = newTemplateData(response, request, result, true, nil)
			statusCode = http.StatusOK
		)
		if err := templates.ExecuteTemplate(buf, "GET /fruits/{id}/edit GetFormEditRow(id)", rd); err != nil {
			http.Error(response, err.Error(), http.StatusInternalServerError)
			return
		}
		if contentType := response.Header().Get("content-type"); contentType == "" {
			response.Header().Set("content-type", "text/html; charset=utf-8")
		}
		response.Header().Set("content-length", strconv.Itoa(buf.Len()))
		if rd.statusCode != 0 {
			statusCode = rd.statusCode
		}
		response.WriteHeader(statusCode)
		_, _ = buf.WriteTo(response)
	})
	mux.HandleFunc("GET /help", func(response http.ResponseWriter, request *http.Request) {
		var result = struct {
		}{}
		var (
			buf        = bytes.NewBuffer(nil)
			rd         = newTemplateData(response, request, result, true, nil)
			statusCode = http.StatusOK
		)
		if err := templates.ExecuteTemplate(buf, "GET /help", rd); err != nil {
			http.Error(response, err.Error(), http.StatusInternalServerError)
			return
		}
		if contentType := response.Header().Get("content-type"); contentType == "" {
			response.Header().Set("content-type", "text/html; charset=utf-8")
		}
		response.Header().Set("content-length", strconv.Itoa(buf.Len()))
		if rd.statusCode != 0 {
			statusCode = rd.statusCode
		}
		response.WriteHeader(statusCode)
		_, _ = buf.WriteTo(response)
	})
	mux.HandleFunc("GET /{$}", func(response http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		result := receiver.List(ctx)
		var (
			buf        = bytes.NewBuffer(nil)
			rd         = newTemplateData(response, request, result, true, nil)
			statusCode = http.StatusOK
		)
		if err := templates.ExecuteTemplate(buf, "GET /{$} List(ctx)", rd); err != nil {
			http.Error(response, err.Error(), http.StatusInternalServerError)
			return
		}
		if contentType := response.Header().Get("content-type"); contentType == "" {
			response.Header().Set("content-type", "text/html; charset=utf-8")
		}
		response.Header().Set("content-length", strconv.Itoa(buf.Len()))
		if rd.statusCode != 0 {
			statusCode = rd.statusCode
		}
		response.WriteHeader(statusCode)
		_, _ = buf.WriteTo(response)
	})
}

type TemplateData[T any] struct {
	response   http.ResponseWriter
	request    *http.Request
	result     T
	statusCode int
	okay       bool
	error      error
}

func newTemplateData[T any](response http.ResponseWriter, request *http.Request, result T, okay bool, err error) *TemplateData[T] {
	return &TemplateData[T]{response: response, request: request, result: result, okay: okay, error: err}
}

func (data *TemplateData[T]) Path() TemplateRoutePaths {
	return TemplateRoutePaths{}
}

func (data *TemplateData[T]) Result() T {
	return data.result
}

func (data *TemplateData[T]) Request() *http.Request {
	return data.request
}

func (data *TemplateData[T]) StatusCode(statusCode int) *TemplateData[T] {
	data.statusCode = statusCode
	return data
}

func (data *TemplateData[T]) Header(key, value string) *TemplateData[T] {
	data.response.Header().Set(key, value)
	return data
}

func (data *TemplateData[T]) Ok() bool {
	return data.okay
}

func (data *TemplateData[T]) Err() error {
	return data.error
}

type TemplateRoutePaths struct {
}

func TemplateRoutePath() TemplateRoutePaths {
	return TemplateRoutePaths{}
}

func (TemplateRoutePaths) SubmitFormEditRow(id int) string {
	return "/" + path.Join("fruits", strconv.Itoa(id))
}

func (TemplateRoutePaths) GetFormEditRow(id int) string {
	return "/" + path.Join("fruits", strconv.Itoa(id), "edit")
}

func (TemplateRoutePaths) ReadHelp() string {
	return "/help"
}

func (TemplateRoutePaths) List() string {
	return "/"
}
