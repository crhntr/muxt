// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"context"
	"sync"

	"github.com/crhntr/muxt/example/hypertext"
)

type Backend struct {
	GetFormEditRowStub        func(int) (hypertext.Row, error)
	getFormEditRowMutex       sync.RWMutex
	getFormEditRowArgsForCall []struct {
		arg1 int
	}
	getFormEditRowReturns struct {
		result1 hypertext.Row
		result2 error
	}
	getFormEditRowReturnsOnCall map[int]struct {
		result1 hypertext.Row
		result2 error
	}
	ListStub        func(context.Context) []hypertext.Row
	listMutex       sync.RWMutex
	listArgsForCall []struct {
		arg1 context.Context
	}
	listReturns struct {
		result1 []hypertext.Row
	}
	listReturnsOnCall map[int]struct {
		result1 []hypertext.Row
	}
	SubmitFormEditRowStub        func(int, hypertext.EditRow) (hypertext.Row, error)
	submitFormEditRowMutex       sync.RWMutex
	submitFormEditRowArgsForCall []struct {
		arg1 int
		arg2 hypertext.EditRow
	}
	submitFormEditRowReturns struct {
		result1 hypertext.Row
		result2 error
	}
	submitFormEditRowReturnsOnCall map[int]struct {
		result1 hypertext.Row
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Backend) GetFormEditRow(arg1 int) (hypertext.Row, error) {
	fake.getFormEditRowMutex.Lock()
	ret, specificReturn := fake.getFormEditRowReturnsOnCall[len(fake.getFormEditRowArgsForCall)]
	fake.getFormEditRowArgsForCall = append(fake.getFormEditRowArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.GetFormEditRowStub
	fakeReturns := fake.getFormEditRowReturns
	fake.recordInvocation("GetFormEditRow", []interface{}{arg1})
	fake.getFormEditRowMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Backend) GetFormEditRowCallCount() int {
	fake.getFormEditRowMutex.RLock()
	defer fake.getFormEditRowMutex.RUnlock()
	return len(fake.getFormEditRowArgsForCall)
}

func (fake *Backend) GetFormEditRowCalls(stub func(int) (hypertext.Row, error)) {
	fake.getFormEditRowMutex.Lock()
	defer fake.getFormEditRowMutex.Unlock()
	fake.GetFormEditRowStub = stub
}

func (fake *Backend) GetFormEditRowArgsForCall(i int) int {
	fake.getFormEditRowMutex.RLock()
	defer fake.getFormEditRowMutex.RUnlock()
	argsForCall := fake.getFormEditRowArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Backend) GetFormEditRowReturns(result1 hypertext.Row, result2 error) {
	fake.getFormEditRowMutex.Lock()
	defer fake.getFormEditRowMutex.Unlock()
	fake.GetFormEditRowStub = nil
	fake.getFormEditRowReturns = struct {
		result1 hypertext.Row
		result2 error
	}{result1, result2}
}

func (fake *Backend) GetFormEditRowReturnsOnCall(i int, result1 hypertext.Row, result2 error) {
	fake.getFormEditRowMutex.Lock()
	defer fake.getFormEditRowMutex.Unlock()
	fake.GetFormEditRowStub = nil
	if fake.getFormEditRowReturnsOnCall == nil {
		fake.getFormEditRowReturnsOnCall = make(map[int]struct {
			result1 hypertext.Row
			result2 error
		})
	}
	fake.getFormEditRowReturnsOnCall[i] = struct {
		result1 hypertext.Row
		result2 error
	}{result1, result2}
}

func (fake *Backend) List(arg1 context.Context) []hypertext.Row {
	fake.listMutex.Lock()
	ret, specificReturn := fake.listReturnsOnCall[len(fake.listArgsForCall)]
	fake.listArgsForCall = append(fake.listArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.ListStub
	fakeReturns := fake.listReturns
	fake.recordInvocation("List", []interface{}{arg1})
	fake.listMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *Backend) ListCallCount() int {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return len(fake.listArgsForCall)
}

func (fake *Backend) ListCalls(stub func(context.Context) []hypertext.Row) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = stub
}

func (fake *Backend) ListArgsForCall(i int) context.Context {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	argsForCall := fake.listArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Backend) ListReturns(result1 []hypertext.Row) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = nil
	fake.listReturns = struct {
		result1 []hypertext.Row
	}{result1}
}

func (fake *Backend) ListReturnsOnCall(i int, result1 []hypertext.Row) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = nil
	if fake.listReturnsOnCall == nil {
		fake.listReturnsOnCall = make(map[int]struct {
			result1 []hypertext.Row
		})
	}
	fake.listReturnsOnCall[i] = struct {
		result1 []hypertext.Row
	}{result1}
}

func (fake *Backend) SubmitFormEditRow(arg1 int, arg2 hypertext.EditRow) (hypertext.Row, error) {
	fake.submitFormEditRowMutex.Lock()
	ret, specificReturn := fake.submitFormEditRowReturnsOnCall[len(fake.submitFormEditRowArgsForCall)]
	fake.submitFormEditRowArgsForCall = append(fake.submitFormEditRowArgsForCall, struct {
		arg1 int
		arg2 hypertext.EditRow
	}{arg1, arg2})
	stub := fake.SubmitFormEditRowStub
	fakeReturns := fake.submitFormEditRowReturns
	fake.recordInvocation("SubmitFormEditRow", []interface{}{arg1, arg2})
	fake.submitFormEditRowMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Backend) SubmitFormEditRowCallCount() int {
	fake.submitFormEditRowMutex.RLock()
	defer fake.submitFormEditRowMutex.RUnlock()
	return len(fake.submitFormEditRowArgsForCall)
}

func (fake *Backend) SubmitFormEditRowCalls(stub func(int, hypertext.EditRow) (hypertext.Row, error)) {
	fake.submitFormEditRowMutex.Lock()
	defer fake.submitFormEditRowMutex.Unlock()
	fake.SubmitFormEditRowStub = stub
}

func (fake *Backend) SubmitFormEditRowArgsForCall(i int) (int, hypertext.EditRow) {
	fake.submitFormEditRowMutex.RLock()
	defer fake.submitFormEditRowMutex.RUnlock()
	argsForCall := fake.submitFormEditRowArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Backend) SubmitFormEditRowReturns(result1 hypertext.Row, result2 error) {
	fake.submitFormEditRowMutex.Lock()
	defer fake.submitFormEditRowMutex.Unlock()
	fake.SubmitFormEditRowStub = nil
	fake.submitFormEditRowReturns = struct {
		result1 hypertext.Row
		result2 error
	}{result1, result2}
}

func (fake *Backend) SubmitFormEditRowReturnsOnCall(i int, result1 hypertext.Row, result2 error) {
	fake.submitFormEditRowMutex.Lock()
	defer fake.submitFormEditRowMutex.Unlock()
	fake.SubmitFormEditRowStub = nil
	if fake.submitFormEditRowReturnsOnCall == nil {
		fake.submitFormEditRowReturnsOnCall = make(map[int]struct {
			result1 hypertext.Row
			result2 error
		})
	}
	fake.submitFormEditRowReturnsOnCall[i] = struct {
		result1 hypertext.Row
		result2 error
	}{result1, result2}
}

func (fake *Backend) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Backend) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ hypertext.RoutesReceiver = new(Backend)
